package qi.clickscren2;

/**
 *  点击电脑屏幕
 */


import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import  java.awt.Robot;
import java.awt.Toolkit;


import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;




import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;

import com.melloware.jintellitype.HotkeyListener;
import com.melloware.jintellitype.JIntellitype;



public class ClickScren extends JFrame implements Runnable{
	static boolean flag=false;//启动线程
	double a=3.8;//系数
	Robot robot =null;
	ClickScren cs = this;
	int x0=0;
	int y0=0;
	JLabel state=null;		
	JTextField jtf = null;
	BufferedImage bi=null;//截屏
	Rectangle screenRect=null;//屏幕方框
	public ClickScren(){	
		try {
			robot = new Robot();
			Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
			screenRect = new Rectangle(d);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		this.setSize(300, 300);
		this.setResizable(false);
		this.setLocation(900, 300);
		
		this.setLayout(null);
	
		jtf= new JTextField(a+"");
		jtf.setBounds(80, 20, 30, 30);
		this.add(jtf);
		
		state=new JLabel("未启动");
		state.setBounds(200, 60, 100, 50);
		this.add(state);
		JIntellitype.getInstance().registerHotKey(0, 0, KeyEvent.VK_SPACE);
		JIntellitype.getInstance().registerHotKey(1, 0, KeyEvent.VK_R);
		JIntellitype.getInstance().addHotKeyListener(new HotkeyListener() {
			
			public void onHotKey(int arg0) {
				switch(arg0){
				
				case 0:
					if(!flag)
					{
						flag = true;
						state.setText("已启动");
						new Thread(cs).start();
					}
					break;
				case 1:
					if(flag)
					{
						flag = false;
						state.setText("未启动");
					}
					break;
				default:
				}
			}
		});
		
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setVisible(true);
		

	}

	public static void main(String[] args) {
		
		ClickScren cs = new ClickScren();
		
		new Thread(cs).start();
	}

	public void run() {
		// TODO Auto-generated method stub
		while(true)
		{
		
		}
		
		
	}
	public void shot()
	{
		int qizi=-13290178;
		int yinying = -8025430;
		Graphics g = bi.createGraphics();
		g.setColor(Color.red);
		
		int k=0;
		
		int x1 = 0,y1=0;
		int color=0;
		outer:
		for(int j=bi.getHeight()/6+30;j<bi.getHeight();j++)
		{
			for(int i=0;i<width;i++)
			{
				int c1=bi.getRGB(i, j);
				if(judge(c1,qizi)<20)
				{
					
					g.setColor(Color.blue);
					System.out.println(i+" "+j);
					g.fillOval(i, j+55, 10,10);
					break outer;
					
				}
				if(i>5)
				{
					
					if(k==0&&judge(c1,color)>5)
					{
						k=1;
						x1=i;y1=j;
						System.out.println(i+" "+j);
						g.setColor(Color.red);
						g.fillOval(i, j, 30,30);
						
					}else if(k==1&&i<x1)
					{
						
						if(judge(c1,bi.getRGB(i-1, j))>20&&
								judge(c1,bi.getRGB(i, j+1))>20
								&&judge(bi.getRGB(i, j+10), yinying)<20)//&&judge(bi.getRGB(i, j+10), z)<20
						{
							g.setColor(Color.black);
							System.out.println("in:"+i+" "+j);
							g.fillOval(i,j,5,5);
							k=2;
							g.setColor(Color.red);
							g.fillOval(x1-10,j-10,5,5);
							length = Math.sqrt((x1-i)*(x1-i)+(j-y1)*(j-y1));
						}
						
					}
				}
				color=c1;

				
			}
		}
	}
	public double judge(int c1,int c)
	{
		int red1 = (0xff)&(c1>>16);
		int green1 = (0xff)&(c1>>8);
		int blue1= (0xff)&c1;
		
		int red= (0xff)&(c>>16);
		int green = (0xff)&(c>>8);
		int blue= (0xff)&c;
		int r1 = red1-red;
		int b1 = blue1-blue;
		int g1 = green1-green;
		double t = Math.sqrt(r1*r1+b1*b1+g1*g1);
		return  Math.sqrt(r1*r1+b1*b1+g1*g1);
	}








}
