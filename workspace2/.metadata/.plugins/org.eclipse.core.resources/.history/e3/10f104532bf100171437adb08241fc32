package qi.clickscren2;

/**
 *  µã»÷µçÄÔÆÁÄ»
 */


import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import  java.awt.Robot;
import java.awt.Toolkit;


import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;




import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;

import com.melloware.jintellitype.HotkeyListener;
import com.melloware.jintellitype.JIntellitype;



public class ClickScren extends JFrame implements Runnable{
	static boolean flag=false;
	double a=3.8;
	Robot robot =null;
	ClickScren cs = this;
	int x0=0;
	int y0=0;
	JLabel state=null;
	JTextField jtf = null;
	BufferedImage bf=null;
	Rectangle screenRect=null;
	public ClickScren(){	
		try {
			robot = new Robot();
			Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
			screenRect = new Rectangle(d);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		this.setSize(300, 300);
		this.setResizable(false);
		this.setLocation(900, 300);
		
		this.setLayout(null);
	
		jtf= new JTextField(a+"");
		jtf.setBounds(80, 20, 30, 30);
		this.add(jtf);
		
		state=new JLabel(this.flag+"");
		state.setBounds(200, 60, 100, 50);
		this.add(state);
		JIntellitype.getInstance().registerHotKey(0, 0, KeyEvent.VK_SPACE);
		JIntellitype.getInstance().registerHotKey(1, 0, KeyEvent.VK_R);
		JIntellitype.getInstance().addHotKeyListener(new HotkeyListener() {
			
			public void onHotKey(int arg0) {
				switch(arg0){
				
				case 0:
					if(!flag)
					{
						flag = true;
						new Thread(cs).start();
					}
					break;
				case 1:
					flag = false;
					break;
				default:
				}
			}
		});
		
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setVisible(true);
		

	}

	public static void main(String[] args) {
		
		ClickScren cs = new ClickScren();
		
		new Thread(cs).start();
	}

	public void run() {
		// TODO Auto-generated method stub
		while(true)
		{
		
		}
		
		
	}
	public void shot()
	{
		
	}

	public double judge(int c1,int c)
	{
		int red1 = (0xff)&(c1>>16);
		int green1 = (0xff)&(c1>>8);
		int blue1= (0xff)&c1;
		
		int red= (0xff)&(c>>16);
		int green = (0xff)&(c>>8);
		int blue= (0xff)&c;
		int r1 = red1-red;
		int b1 = blue1-blue;
		int g1 = green1-green;
		double t = Math.sqrt(r1*r1+b1*b1+g1*g1);
		return  Math.sqrt(r1*r1+b1*b1+g1*g1);
	}








}
